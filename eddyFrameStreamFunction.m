function[psip,psi,psif] = eddyFrameStreamFunction(xp,yp,ssh,u0,v0,f0)
%eddyFrameStreamFunction  Streamfunction of an eddy in the co-moving frame.
%
%   PSIP = eddyFrameStreamFunction(XP,YP,SSH,U0,V0,F0) finds the 
%   streamfunction in the co-moving or eddy-fixed frame. 
%
%   XP and YP are uniformly spaced 1D coordinate arrays in the co-moving 
%   frame, with the origin (0,0) corresponding to the eddy center. SSH is 
%   a 3D array of sea surface height with LENGTH(XP) rows and LENGTH(YP)
%   columns.  These are generated by FIELDINEDDYFRAME.
%
%   U0 and V0 are the eastward and northward velocity components of the 
%   eddy center relative to the Earth. F0 is the Coriolis frequency.
% 
%   In this function, units are important.  The units of XP, YP, and SSH 
%   are all m, U0 and V0 are in m/s, and F0 has units of 1/s. The 
%   streamfunction PSIP then has the units m^2/s.  
%
%   The geostrophic velocities UP, VP relative to the co-moving frame are 
%   then given by UP = -VDIFF(PSIP,1) / DX and VP = VDIFF(PSIP,2) / DX 
%   where DX = XP(2)-XP(1) is the sampling interval of the XP, YP 
%   coordinates.  VDIFF implements the first central difference.  
% 
%   [PSIP,PSI,PSIF] = eddyFrameStreamFunction(...) also returns PSI, the 
%   streamfunction for the flow relative to the Earth, and PSIF, the 
%   streamfunction for the eddy center velocity relative to the Earth. 
%
%   Note that all three streamfunctions have LENGTH(YP) rows and LENGTH(XP)
%   columns, that is, they are expressed with respect to the eddy-centered
%   or primed coordinates (XP,YP). 
%  
%   Usage: psip = eddyFrameStreamFunction(xp,yp,ssh,uf,vf,f0);
%          [psip,psi,psif] = eddyFrameStreamFunction(xp,yp,ssh,uf,vf,f0);


arguments (Input)
    xp {mustBeNumeric,mustBeReal,mustBeFinite,mustBeVector,mustBeUniform(xp)}
    yp {mustBeNumeric,mustBeReal,mustBeFinite,mustBeVector,mustBeUniform(yp),mustHaveSameSpacing(xp,yp)}
    ssh {mustBeNumeric,mustBeReal,mustBeCompatible(xp,yp,ssh)} 
    u0 {mustBeNumeric,mustBeReal,mustBeFinite,mustBeVector}
    v0 {mustBeNumeric,mustBeReal,mustBeFinite,mustBeVector}
    f0 (1,1) double {mustBeReal,mustBeFinite}
end

arguments (Output)
    psip {mustBeNumeric,mustBeReal} 
    psi {mustBeNumeric,mustBeReal} 
    psif {mustBeNumeric,mustBeReal} 
end

%dx = xp(2)-xp(1);%this is the same between x and y
psif = zeros(length(xp),length(yp),length(u0));

[xg,yg] = ndgrid(xp,yp);

psi = (9.81/f0)*ssh; %

for k=1:size(psi,3)
    psif(:,:,k)=(v0(k)*xg-u0(k)*yg);
end

psip = psi-psif;
end
